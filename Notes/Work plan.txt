* Handle ambiguity in new ParserGenerator (all tests running against new code)
	* Handle PEG precedence in PEG parser
	* Integrate PEG parser with ParserGenerator/Interpreter as a solution to when we encounter recursion errors. Also add lifting to single symbol handling
	* Merge peg branch
	* Add "static" ambiguity resolution for easy reduce/reduce cases in ParserGenerator and UnresolvedSubContextSwitchActionResolver
	* Convert multiple null derivation rewriter tests
* Remove old ParserGenerator and any irrelevant tests, update namespaces
* Merge new-parser-generator branch
* CodeGen
	* Unused context trimming
	* Context grouping (group together contexts that will gen a single method)
	* Name / ID assignments for methods, constants
	* IL (test with IL interpreter)
	* C#
	* JS
* Basic Error Handling
* Lexing
* Grammar specification syntax
* List parsing
* Ambiguity error synthetic symbol cleanup
* Pratt optimization
* LL(k) lookahead
* Revisit indirect/hidden left recursion
* Revisit validator (e. g. are we handling rules like S -> S N where N is nullable?)
* Revisit precedence ambiguities
* Revisit parser state actions (is this the right way to solve it or should we use generic symbols?)
* Resolve TODOs

==== POST RELEASE ====
* LL(*) lookahead?